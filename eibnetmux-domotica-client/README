
COME CONTRIBUIRE AL CODICE:

Si deve utilizzare git e sincronizzarsi al mio progetto su http://github.com/nagash91/eibnetmux_domotica_client

Dopo di che dobbiamo compilare ed installare le dipendenze in modo da poter compilare il codice.
Ho creato un file "install.sh" dentro la cartella dipendenze. Ma ho anche creato questa breve spiegazione di come farlo manualmente.

Ecco come ho organizzato l'albero delle cartelle:

`-- Eibnetmux
    |-- Build
    |   |-- Dipendenze
    |   |   |-- polarssl-0.12.1
    |   |   |-- pth-2.0.7
    |   |   `-- zlogger-1.1.2
    |   `-- eibnetmux-1.9.14
    `-- Pacchetti
        |-- Dipendenze
        |   |-- polarssl-0.12.1-gpl.tgz
        |   |-- pth-2.0.7.tar.gz
        |   `-- zlogger-1.1.2.tar.gz
        |-- Istruzioni
        |-- Istruzioni~
        `-- eibnetmux-1.9.14.tar.gz


La cartella Pacchetti contiene tutti i pacchetti da installare.
Build contiene tutti i pacchetti scompattati, quindi da compilare o gia compilati.

Per prima cosa compiliamo quindi le dipendenze:


A) Polar SSL
1. mettendoci nella posizione della prima dipendenza:  $ cd home/user/Eibnetmux/Build/Dipendenze/polarssl-0.12.1
2. Diamo il comando per compilare: $ make all
3. Diamo il comando per installare il pacchetto compilato, da amministratori: $ sudo make install


B) PTH
1. mettendoci nella posizione della prima dipendenza:  $ cd home/user/Eibnetmux/Build/Dipendenze/pth-2.0.7
2. Diamo il comando per configurare la compilazione: $ ./configure
3. Diamo il comando per compilare: $ make all
4. Diamo il comando per installare il pacchetto compilato, da amministratori: $ sudo make install


C) Z Logger
1. mettendoci nella posizione della prima dipendenza:  $ cd home/user/Eibnetmux/Build/Dipendenze/zlogger-1.1.2
2. Diamo il comando per configurare la compilazione: $ ./configure
3. Diamo il comando per compilare: $ make all
4. Diamo il comando per installare il pacchetto compilato, da amministratori: $ sudo make install


Adesso abbiamo installato le tre dipendenze.
Procediamo per compilare eibnetmux:

1. Posizioniamoci nella cartella corretta: $ cd /home/nagash/Eibnetmux/Build/eibnetmux-1.9.14
2. configuriamo: $ ./configure
3. compiliamo: $make all   A questo punto però darà un errore di uscita dalla directory. Allora compiliamo le sotto cartelle manualmente:
4. $ cd /home/user/Eibnetmux/Build/eibnetmux-1.9.14/eibnetmux    $ make all

A questo punto abbiamo compilato eibnetmux, e avremo 3 eseguibili, tra cui il server "eibnetmux"


------------------------------------

COMPILAZIONE CLIENT LIBRARY:

Adesso andiamo a compilare le Client_Lib. C'è un problema qua. Una funzione restituisce uno warning (asprintf) e non c'è modo di risolverlo. Il makefile indica anche che tutti gli warning siano trattati come errori. Quindi abbiamo eliminato questa opzione dal makefile per riuscire a compilare correttamente.

Quindi per prima cosa dirigiamoci in /home/user/Eibnetmux/Build/eibnetmux-1.9.14/client_lib.
All'interno troverete 3 makefile, nessuno contiene il flag -werror (cioè warning error, che trasforma gli warning in error).
Aprendo la cartella "C" troviamo altri 3 makefile. Tutti e 3 hanno il flag -werror. Trovatelo con un find di un editor di testo, ed eliminatelo da tutti e 3 i makefile. Il php non da problemi. quindi possiamo proseguire a compilare.

A questo punto ridirigiamoci in /home/user/Eibnetmux/Build/eibnetmux-1.9.14/client_lib e compiliamo:
$ cd /home/nagash/Eibnetmux/Build/eibnetmux-1.9.14/client_lib
$ make


In effetti non sono certo che sia importante compilarle. La compilazione delle client lib, genera un file.lo e un file.o (oggetto) per ogni file.c (file sorgente). In ogni caso probabilmente quando avremo utilizzato la client lib di eibnetmux, includendo enmx_lib.h, una votla compilato il nostro programma avrebbe automaticamente compilato anche le librerie.
Forse abbiamo quindi solo anticipato il lavoro.



-------------------------------------

CONTROLLO VERSIONE

Come controllo versione ho deciso di usare git, tramite il sito github.
Per configurare git:


Global setup:

  Download and install Git
  git config --global user.name "Your Name"
  git config --global user.email email@email.com
        

Next steps:

  mkdir eibnetmux_domotica_client
  cd eibnetmux_domotica_client
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:nagash91/eibnetmux_domotica_client.git
  git push origin master
      

Existing Git Repo?

  cd existing_git_repo
  git remote add origin git@github.com:nagash91/eibnetmux_domotica_client.git
  git push origin master
      

-------------------------------------

AMBIENTE DI SVILUPPO:

Abbiamo utilizzato netbeans come ambiente di sviluppo. Essendo sotto il sistema operativo gnu/linux Ubuntu, abbiamo scaricato netbeans precompilato da "ubuntu software center", cercando nel form apposito la parola "netbeans", per poi scaricarlo e installarlo. (tutto automaticamente grazie al software center)

